// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// asap_bbknn
Rcpp::List asap_bbknn(const std::vector<Eigen::MatrixXf> data_nk_vec, const std::vector<std::vector<std::string>> row_names_vec, const std::size_t KNN_PER_BATCH, const std::size_t BLOCK_SIZE, const std::size_t NUM_THREADS, const bool verbose);
RcppExport SEXP _asapR_asap_bbknn(SEXP data_nk_vecSEXP, SEXP row_names_vecSEXP, SEXP KNN_PER_BATCHSEXP, SEXP BLOCK_SIZESEXP, SEXP NUM_THREADSSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<Eigen::MatrixXf> >::type data_nk_vec(data_nk_vecSEXP);
    Rcpp::traits::input_parameter< const std::vector<std::vector<std::string>> >::type row_names_vec(row_names_vecSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type KNN_PER_BATCH(KNN_PER_BATCHSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type BLOCK_SIZE(BLOCK_SIZESEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type NUM_THREADS(NUM_THREADSSEXP);
    Rcpp::traits::input_parameter< const bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(asap_bbknn(data_nk_vec, row_names_vec, KNN_PER_BATCH, BLOCK_SIZE, NUM_THREADS, verbose));
    return rcpp_result_gen;
END_RCPP
}
// asap_build_interaction
Rcpp::List asap_build_interaction(const Eigen::SparseMatrix<float>& y_dn, const Eigen::SparseMatrix<float>& z_dm, const Eigen::MatrixXf log_beta, const Rcpp::StringVector beta_row_names, const std::size_t knn, const Rcpp::Nullable<Eigen::MatrixXf> r_log_delta, const bool do_stdize_beta, const bool do_log1p, const bool verbose, const std::size_t NUM_THREADS, const double CELL_NORM, const std::size_t BLOCK_SIZE);
RcppExport SEXP _asapR_asap_build_interaction(SEXP y_dnSEXP, SEXP z_dmSEXP, SEXP log_betaSEXP, SEXP beta_row_namesSEXP, SEXP knnSEXP, SEXP r_log_deltaSEXP, SEXP do_stdize_betaSEXP, SEXP do_log1pSEXP, SEXP verboseSEXP, SEXP NUM_THREADSSEXP, SEXP CELL_NORMSEXP, SEXP BLOCK_SIZESEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::SparseMatrix<float>& >::type y_dn(y_dnSEXP);
    Rcpp::traits::input_parameter< const Eigen::SparseMatrix<float>& >::type z_dm(z_dmSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXf >::type log_beta(log_betaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::StringVector >::type beta_row_names(beta_row_namesSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type knn(knnSEXP);
    Rcpp::traits::input_parameter< const Rcpp::Nullable<Eigen::MatrixXf> >::type r_log_delta(r_log_deltaSEXP);
    Rcpp::traits::input_parameter< const bool >::type do_stdize_beta(do_stdize_betaSEXP);
    Rcpp::traits::input_parameter< const bool >::type do_log1p(do_log1pSEXP);
    Rcpp::traits::input_parameter< const bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type NUM_THREADS(NUM_THREADSSEXP);
    Rcpp::traits::input_parameter< const double >::type CELL_NORM(CELL_NORMSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type BLOCK_SIZE(BLOCK_SIZESEXP);
    rcpp_result_gen = Rcpp::wrap(asap_build_interaction(y_dn, z_dm, log_beta, beta_row_names, knn, r_log_delta, do_stdize_beta, do_log1p, verbose, NUM_THREADS, CELL_NORM, BLOCK_SIZE));
    return rcpp_result_gen;
END_RCPP
}
// asap_build_interaction_mtx
Rcpp::List asap_build_interaction_mtx(const std::string mtx_file, const std::string row_file, const std::string col_file, const std::string idx_file, const Eigen::MatrixXf log_beta, const Rcpp::StringVector beta_row_names, const std::size_t knn, const Rcpp::Nullable<Eigen::MatrixXf> r_log_delta, const Rcpp::Nullable<std::string> mtx_file_rhs, const Rcpp::Nullable<std::string> row_file_rhs, const Rcpp::Nullable<std::string> col_file_rhs, const Rcpp::Nullable<std::string> idx_file_rhs, const bool do_stdize_beta, const bool do_log1p, const bool verbose, const std::size_t NUM_THREADS, const double CELL_NORM, const std::size_t BLOCK_SIZE, const std::size_t MAX_ROW_WORD, const char ROW_WORD_SEP, const std::size_t MAX_COL_WORD, const char COL_WORD_SEP);
RcppExport SEXP _asapR_asap_build_interaction_mtx(SEXP mtx_fileSEXP, SEXP row_fileSEXP, SEXP col_fileSEXP, SEXP idx_fileSEXP, SEXP log_betaSEXP, SEXP beta_row_namesSEXP, SEXP knnSEXP, SEXP r_log_deltaSEXP, SEXP mtx_file_rhsSEXP, SEXP row_file_rhsSEXP, SEXP col_file_rhsSEXP, SEXP idx_file_rhsSEXP, SEXP do_stdize_betaSEXP, SEXP do_log1pSEXP, SEXP verboseSEXP, SEXP NUM_THREADSSEXP, SEXP CELL_NORMSEXP, SEXP BLOCK_SIZESEXP, SEXP MAX_ROW_WORDSEXP, SEXP ROW_WORD_SEPSEXP, SEXP MAX_COL_WORDSEXP, SEXP COL_WORD_SEPSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string >::type mtx_file(mtx_fileSEXP);
    Rcpp::traits::input_parameter< const std::string >::type row_file(row_fileSEXP);
    Rcpp::traits::input_parameter< const std::string >::type col_file(col_fileSEXP);
    Rcpp::traits::input_parameter< const std::string >::type idx_file(idx_fileSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXf >::type log_beta(log_betaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::StringVector >::type beta_row_names(beta_row_namesSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type knn(knnSEXP);
    Rcpp::traits::input_parameter< const Rcpp::Nullable<Eigen::MatrixXf> >::type r_log_delta(r_log_deltaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::Nullable<std::string> >::type mtx_file_rhs(mtx_file_rhsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::Nullable<std::string> >::type row_file_rhs(row_file_rhsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::Nullable<std::string> >::type col_file_rhs(col_file_rhsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::Nullable<std::string> >::type idx_file_rhs(idx_file_rhsSEXP);
    Rcpp::traits::input_parameter< const bool >::type do_stdize_beta(do_stdize_betaSEXP);
    Rcpp::traits::input_parameter< const bool >::type do_log1p(do_log1pSEXP);
    Rcpp::traits::input_parameter< const bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type NUM_THREADS(NUM_THREADSSEXP);
    Rcpp::traits::input_parameter< const double >::type CELL_NORM(CELL_NORMSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type BLOCK_SIZE(BLOCK_SIZESEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type MAX_ROW_WORD(MAX_ROW_WORDSEXP);
    Rcpp::traits::input_parameter< const char >::type ROW_WORD_SEP(ROW_WORD_SEPSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type MAX_COL_WORD(MAX_COL_WORDSEXP);
    Rcpp::traits::input_parameter< const char >::type COL_WORD_SEP(COL_WORD_SEPSEXP);
    rcpp_result_gen = Rcpp::wrap(asap_build_interaction_mtx(mtx_file, row_file, col_file, idx_file, log_beta, beta_row_names, knn, r_log_delta, mtx_file_rhs, row_file_rhs, col_file_rhs, idx_file_rhs, do_stdize_beta, do_log1p, verbose, NUM_THREADS, CELL_NORM, BLOCK_SIZE, MAX_ROW_WORD, ROW_WORD_SEP, MAX_COL_WORD, COL_WORD_SEP));
    return rcpp_result_gen;
END_RCPP
}
// asap_interaction_random_bulk
Rcpp::List asap_interaction_random_bulk(const std::string mtx_file, const std::string row_file, const std::string col_file, const std::string idx_file, const std::size_t num_factors, const Rcpp::List W_nm_list, const Rcpp::Nullable<std::string> mtx_file_rhs, const Rcpp::Nullable<std::string> row_file_rhs, const Rcpp::Nullable<std::string> col_file_rhs, const Rcpp::Nullable<std::string> idx_file_rhs, const Rcpp::Nullable<Rcpp::List> A_dd_list, const std::size_t rseed, const bool do_product, const bool do_log1p, const bool do_down_sample, const bool save_rand_proj, const bool weighted_rand_proj, const std::size_t NUM_THREADS, const double CELL_NORM, const std::size_t BLOCK_SIZE, const std::size_t EDGE_PER_SAMPLE, const double a0, const double b0, const std::size_t MAX_ROW_WORD, const char ROW_WORD_SEP, const std::size_t MAX_COL_WORD, const char COL_WORD_SEP, const bool verbose);
RcppExport SEXP _asapR_asap_interaction_random_bulk(SEXP mtx_fileSEXP, SEXP row_fileSEXP, SEXP col_fileSEXP, SEXP idx_fileSEXP, SEXP num_factorsSEXP, SEXP W_nm_listSEXP, SEXP mtx_file_rhsSEXP, SEXP row_file_rhsSEXP, SEXP col_file_rhsSEXP, SEXP idx_file_rhsSEXP, SEXP A_dd_listSEXP, SEXP rseedSEXP, SEXP do_productSEXP, SEXP do_log1pSEXP, SEXP do_down_sampleSEXP, SEXP save_rand_projSEXP, SEXP weighted_rand_projSEXP, SEXP NUM_THREADSSEXP, SEXP CELL_NORMSEXP, SEXP BLOCK_SIZESEXP, SEXP EDGE_PER_SAMPLESEXP, SEXP a0SEXP, SEXP b0SEXP, SEXP MAX_ROW_WORDSEXP, SEXP ROW_WORD_SEPSEXP, SEXP MAX_COL_WORDSEXP, SEXP COL_WORD_SEPSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string >::type mtx_file(mtx_fileSEXP);
    Rcpp::traits::input_parameter< const std::string >::type row_file(row_fileSEXP);
    Rcpp::traits::input_parameter< const std::string >::type col_file(col_fileSEXP);
    Rcpp::traits::input_parameter< const std::string >::type idx_file(idx_fileSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type num_factors(num_factorsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type W_nm_list(W_nm_listSEXP);
    Rcpp::traits::input_parameter< const Rcpp::Nullable<std::string> >::type mtx_file_rhs(mtx_file_rhsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::Nullable<std::string> >::type row_file_rhs(row_file_rhsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::Nullable<std::string> >::type col_file_rhs(col_file_rhsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::Nullable<std::string> >::type idx_file_rhs(idx_file_rhsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::Nullable<Rcpp::List> >::type A_dd_list(A_dd_listSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type rseed(rseedSEXP);
    Rcpp::traits::input_parameter< const bool >::type do_product(do_productSEXP);
    Rcpp::traits::input_parameter< const bool >::type do_log1p(do_log1pSEXP);
    Rcpp::traits::input_parameter< const bool >::type do_down_sample(do_down_sampleSEXP);
    Rcpp::traits::input_parameter< const bool >::type save_rand_proj(save_rand_projSEXP);
    Rcpp::traits::input_parameter< const bool >::type weighted_rand_proj(weighted_rand_projSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type NUM_THREADS(NUM_THREADSSEXP);
    Rcpp::traits::input_parameter< const double >::type CELL_NORM(CELL_NORMSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type BLOCK_SIZE(BLOCK_SIZESEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type EDGE_PER_SAMPLE(EDGE_PER_SAMPLESEXP);
    Rcpp::traits::input_parameter< const double >::type a0(a0SEXP);
    Rcpp::traits::input_parameter< const double >::type b0(b0SEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type MAX_ROW_WORD(MAX_ROW_WORDSEXP);
    Rcpp::traits::input_parameter< const char >::type ROW_WORD_SEP(ROW_WORD_SEPSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type MAX_COL_WORD(MAX_COL_WORDSEXP);
    Rcpp::traits::input_parameter< const char >::type COL_WORD_SEP(COL_WORD_SEPSEXP);
    Rcpp::traits::input_parameter< const bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(asap_interaction_random_bulk(mtx_file, row_file, col_file, idx_file, num_factors, W_nm_list, mtx_file_rhs, row_file_rhs, col_file_rhs, idx_file_rhs, A_dd_list, rseed, do_product, do_log1p, do_down_sample, save_rand_proj, weighted_rand_proj, NUM_THREADS, CELL_NORM, BLOCK_SIZE, EDGE_PER_SAMPLE, a0, b0, MAX_ROW_WORD, ROW_WORD_SEP, MAX_COL_WORD, COL_WORD_SEP, verbose));
    return rcpp_result_gen;
END_RCPP
}
// asap_interaction_pmf_stat_mtx
Rcpp::List asap_interaction_pmf_stat_mtx(const std::string mtx_file, const std::string row_file, const std::string col_file, const std::string idx_file, const Eigen::MatrixXf log_beta, const Rcpp::StringVector beta_row_names, const Rcpp::List W_nm_list, const Rcpp::Nullable<std::string> mtx_file2, const Rcpp::Nullable<std::string> row_file2, const Rcpp::Nullable<std::string> col_file2, const Rcpp::Nullable<std::string> idx_file2, const Rcpp::Nullable<Rcpp::List> A_dd_list, const bool do_stdize_beta, const bool do_product, const std::size_t NUM_THREADS, const double CELL_NORM, const std::size_t BLOCK_SIZE, const std::size_t MAX_ROW_WORD, const char ROW_WORD_SEP, const std::size_t MAX_COL_WORD, const char COL_WORD_SEP, const bool verbose);
RcppExport SEXP _asapR_asap_interaction_pmf_stat_mtx(SEXP mtx_fileSEXP, SEXP row_fileSEXP, SEXP col_fileSEXP, SEXP idx_fileSEXP, SEXP log_betaSEXP, SEXP beta_row_namesSEXP, SEXP W_nm_listSEXP, SEXP mtx_file2SEXP, SEXP row_file2SEXP, SEXP col_file2SEXP, SEXP idx_file2SEXP, SEXP A_dd_listSEXP, SEXP do_stdize_betaSEXP, SEXP do_productSEXP, SEXP NUM_THREADSSEXP, SEXP CELL_NORMSEXP, SEXP BLOCK_SIZESEXP, SEXP MAX_ROW_WORDSEXP, SEXP ROW_WORD_SEPSEXP, SEXP MAX_COL_WORDSEXP, SEXP COL_WORD_SEPSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string >::type mtx_file(mtx_fileSEXP);
    Rcpp::traits::input_parameter< const std::string >::type row_file(row_fileSEXP);
    Rcpp::traits::input_parameter< const std::string >::type col_file(col_fileSEXP);
    Rcpp::traits::input_parameter< const std::string >::type idx_file(idx_fileSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXf >::type log_beta(log_betaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::StringVector >::type beta_row_names(beta_row_namesSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type W_nm_list(W_nm_listSEXP);
    Rcpp::traits::input_parameter< const Rcpp::Nullable<std::string> >::type mtx_file2(mtx_file2SEXP);
    Rcpp::traits::input_parameter< const Rcpp::Nullable<std::string> >::type row_file2(row_file2SEXP);
    Rcpp::traits::input_parameter< const Rcpp::Nullable<std::string> >::type col_file2(col_file2SEXP);
    Rcpp::traits::input_parameter< const Rcpp::Nullable<std::string> >::type idx_file2(idx_file2SEXP);
    Rcpp::traits::input_parameter< const Rcpp::Nullable<Rcpp::List> >::type A_dd_list(A_dd_listSEXP);
    Rcpp::traits::input_parameter< const bool >::type do_stdize_beta(do_stdize_betaSEXP);
    Rcpp::traits::input_parameter< const bool >::type do_product(do_productSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type NUM_THREADS(NUM_THREADSSEXP);
    Rcpp::traits::input_parameter< const double >::type CELL_NORM(CELL_NORMSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type BLOCK_SIZE(BLOCK_SIZESEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type MAX_ROW_WORD(MAX_ROW_WORDSEXP);
    Rcpp::traits::input_parameter< const char >::type ROW_WORD_SEP(ROW_WORD_SEPSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type MAX_COL_WORD(MAX_COL_WORDSEXP);
    Rcpp::traits::input_parameter< const char >::type COL_WORD_SEP(COL_WORD_SEPSEXP);
    Rcpp::traits::input_parameter< const bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(asap_interaction_pmf_stat_mtx(mtx_file, row_file, col_file, idx_file, log_beta, beta_row_names, W_nm_list, mtx_file2, row_file2, col_file2, idx_file2, A_dd_list, do_stdize_beta, do_product, NUM_THREADS, CELL_NORM, BLOCK_SIZE, MAX_ROW_WORD, ROW_WORD_SEP, MAX_COL_WORD, COL_WORD_SEP, verbose));
    return rcpp_result_gen;
END_RCPP
}
// asap_random_bulk_mtx
Rcpp::List asap_random_bulk_mtx(const std::string mtx_file, const std::string row_file, const std::string col_file, const std::string idx_file, const std::size_t num_factors, const Rcpp::Nullable<Rcpp::NumericMatrix> r_covar_n, const Rcpp::Nullable<Rcpp::NumericMatrix> r_covar_d, const Rcpp::Nullable<Rcpp::StringVector> rows_restrict, const std::size_t rseed, const bool verbose, const std::size_t NUM_THREADS, const double CELL_NORM, const std::size_t BLOCK_SIZE, const bool do_log1p, const bool do_down_sample, const bool save_aux_data, const bool weighted_rand_proj, const std::size_t CELL_PER_SAMPLE, const double a0, const double b0, const std::size_t MAX_ROW_WORD, const char ROW_WORD_SEP, const std::size_t MAX_COL_WORD, const char COL_WORD_SEP);
RcppExport SEXP _asapR_asap_random_bulk_mtx(SEXP mtx_fileSEXP, SEXP row_fileSEXP, SEXP col_fileSEXP, SEXP idx_fileSEXP, SEXP num_factorsSEXP, SEXP r_covar_nSEXP, SEXP r_covar_dSEXP, SEXP rows_restrictSEXP, SEXP rseedSEXP, SEXP verboseSEXP, SEXP NUM_THREADSSEXP, SEXP CELL_NORMSEXP, SEXP BLOCK_SIZESEXP, SEXP do_log1pSEXP, SEXP do_down_sampleSEXP, SEXP save_aux_dataSEXP, SEXP weighted_rand_projSEXP, SEXP CELL_PER_SAMPLESEXP, SEXP a0SEXP, SEXP b0SEXP, SEXP MAX_ROW_WORDSEXP, SEXP ROW_WORD_SEPSEXP, SEXP MAX_COL_WORDSEXP, SEXP COL_WORD_SEPSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string >::type mtx_file(mtx_fileSEXP);
    Rcpp::traits::input_parameter< const std::string >::type row_file(row_fileSEXP);
    Rcpp::traits::input_parameter< const std::string >::type col_file(col_fileSEXP);
    Rcpp::traits::input_parameter< const std::string >::type idx_file(idx_fileSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type num_factors(num_factorsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::Nullable<Rcpp::NumericMatrix> >::type r_covar_n(r_covar_nSEXP);
    Rcpp::traits::input_parameter< const Rcpp::Nullable<Rcpp::NumericMatrix> >::type r_covar_d(r_covar_dSEXP);
    Rcpp::traits::input_parameter< const Rcpp::Nullable<Rcpp::StringVector> >::type rows_restrict(rows_restrictSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type rseed(rseedSEXP);
    Rcpp::traits::input_parameter< const bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type NUM_THREADS(NUM_THREADSSEXP);
    Rcpp::traits::input_parameter< const double >::type CELL_NORM(CELL_NORMSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type BLOCK_SIZE(BLOCK_SIZESEXP);
    Rcpp::traits::input_parameter< const bool >::type do_log1p(do_log1pSEXP);
    Rcpp::traits::input_parameter< const bool >::type do_down_sample(do_down_sampleSEXP);
    Rcpp::traits::input_parameter< const bool >::type save_aux_data(save_aux_dataSEXP);
    Rcpp::traits::input_parameter< const bool >::type weighted_rand_proj(weighted_rand_projSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type CELL_PER_SAMPLE(CELL_PER_SAMPLESEXP);
    Rcpp::traits::input_parameter< const double >::type a0(a0SEXP);
    Rcpp::traits::input_parameter< const double >::type b0(b0SEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type MAX_ROW_WORD(MAX_ROW_WORDSEXP);
    Rcpp::traits::input_parameter< const char >::type ROW_WORD_SEP(ROW_WORD_SEPSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type MAX_COL_WORD(MAX_COL_WORDSEXP);
    Rcpp::traits::input_parameter< const char >::type COL_WORD_SEP(COL_WORD_SEPSEXP);
    rcpp_result_gen = Rcpp::wrap(asap_random_bulk_mtx(mtx_file, row_file, col_file, idx_file, num_factors, r_covar_n, r_covar_d, rows_restrict, rseed, verbose, NUM_THREADS, CELL_NORM, BLOCK_SIZE, do_log1p, do_down_sample, save_aux_data, weighted_rand_proj, CELL_PER_SAMPLE, a0, b0, MAX_ROW_WORD, ROW_WORD_SEP, MAX_COL_WORD, COL_WORD_SEP));
    return rcpp_result_gen;
END_RCPP
}
// asap_random_bulk_cbind
Rcpp::List asap_random_bulk_cbind(const std::vector<Eigen::SparseMatrix<float>> y_dn_vec, const std::size_t num_factors, const Rcpp::Nullable<Rcpp::StringVector> r_row_names, const Rcpp::Nullable<Rcpp::StringVector> r_batch_names, const std::size_t rseed, const bool verbose, const std::size_t NUM_THREADS, const double CELL_NORM, const std::size_t BLOCK_SIZE, const bool do_batch_adj, const bool do_log1p, const bool do_down_sample, const bool save_aux_data, const std::size_t KNN_CELL, const std::size_t CELL_PER_SAMPLE, const std::size_t BATCH_ADJ_ITER, const double a0, const double b0);
RcppExport SEXP _asapR_asap_random_bulk_cbind(SEXP y_dn_vecSEXP, SEXP num_factorsSEXP, SEXP r_row_namesSEXP, SEXP r_batch_namesSEXP, SEXP rseedSEXP, SEXP verboseSEXP, SEXP NUM_THREADSSEXP, SEXP CELL_NORMSEXP, SEXP BLOCK_SIZESEXP, SEXP do_batch_adjSEXP, SEXP do_log1pSEXP, SEXP do_down_sampleSEXP, SEXP save_aux_dataSEXP, SEXP KNN_CELLSEXP, SEXP CELL_PER_SAMPLESEXP, SEXP BATCH_ADJ_ITERSEXP, SEXP a0SEXP, SEXP b0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<Eigen::SparseMatrix<float>> >::type y_dn_vec(y_dn_vecSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type num_factors(num_factorsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::Nullable<Rcpp::StringVector> >::type r_row_names(r_row_namesSEXP);
    Rcpp::traits::input_parameter< const Rcpp::Nullable<Rcpp::StringVector> >::type r_batch_names(r_batch_namesSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type rseed(rseedSEXP);
    Rcpp::traits::input_parameter< const bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type NUM_THREADS(NUM_THREADSSEXP);
    Rcpp::traits::input_parameter< const double >::type CELL_NORM(CELL_NORMSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type BLOCK_SIZE(BLOCK_SIZESEXP);
    Rcpp::traits::input_parameter< const bool >::type do_batch_adj(do_batch_adjSEXP);
    Rcpp::traits::input_parameter< const bool >::type do_log1p(do_log1pSEXP);
    Rcpp::traits::input_parameter< const bool >::type do_down_sample(do_down_sampleSEXP);
    Rcpp::traits::input_parameter< const bool >::type save_aux_data(save_aux_dataSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type KNN_CELL(KNN_CELLSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type CELL_PER_SAMPLE(CELL_PER_SAMPLESEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type BATCH_ADJ_ITER(BATCH_ADJ_ITERSEXP);
    Rcpp::traits::input_parameter< const double >::type a0(a0SEXP);
    Rcpp::traits::input_parameter< const double >::type b0(b0SEXP);
    rcpp_result_gen = Rcpp::wrap(asap_random_bulk_cbind(y_dn_vec, num_factors, r_row_names, r_batch_names, rseed, verbose, NUM_THREADS, CELL_NORM, BLOCK_SIZE, do_batch_adj, do_log1p, do_down_sample, save_aux_data, KNN_CELL, CELL_PER_SAMPLE, BATCH_ADJ_ITER, a0, b0));
    return rcpp_result_gen;
END_RCPP
}
// asap_random_bulk_cbind_mtx
Rcpp::List asap_random_bulk_cbind_mtx(const std::vector<std::string> mtx_files, const std::vector<std::string> row_files, const std::vector<std::string> col_files, const std::vector<std::string> idx_files, const std::size_t num_factors, const Rcpp::Nullable<Rcpp::StringVector> r_batch_names, const Rcpp::Nullable<Rcpp::StringVector> rows_restrict, const bool rename_columns, const bool take_union_rows, const std::size_t rseed, const bool verbose, const std::size_t NUM_THREADS, const double CELL_NORM, const std::size_t BLOCK_SIZE, const bool do_batch_adj, const bool do_log1p, const bool do_down_sample, const bool save_aux_data, const std::size_t KNN_CELL, const std::size_t CELL_PER_SAMPLE, const std::size_t BATCH_ADJ_ITER, const double a0, const double b0, const std::size_t MAX_ROW_WORD, const char ROW_WORD_SEP, const std::size_t MAX_COL_WORD, const char COL_WORD_SEP);
RcppExport SEXP _asapR_asap_random_bulk_cbind_mtx(SEXP mtx_filesSEXP, SEXP row_filesSEXP, SEXP col_filesSEXP, SEXP idx_filesSEXP, SEXP num_factorsSEXP, SEXP r_batch_namesSEXP, SEXP rows_restrictSEXP, SEXP rename_columnsSEXP, SEXP take_union_rowsSEXP, SEXP rseedSEXP, SEXP verboseSEXP, SEXP NUM_THREADSSEXP, SEXP CELL_NORMSEXP, SEXP BLOCK_SIZESEXP, SEXP do_batch_adjSEXP, SEXP do_log1pSEXP, SEXP do_down_sampleSEXP, SEXP save_aux_dataSEXP, SEXP KNN_CELLSEXP, SEXP CELL_PER_SAMPLESEXP, SEXP BATCH_ADJ_ITERSEXP, SEXP a0SEXP, SEXP b0SEXP, SEXP MAX_ROW_WORDSEXP, SEXP ROW_WORD_SEPSEXP, SEXP MAX_COL_WORDSEXP, SEXP COL_WORD_SEPSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<std::string> >::type mtx_files(mtx_filesSEXP);
    Rcpp::traits::input_parameter< const std::vector<std::string> >::type row_files(row_filesSEXP);
    Rcpp::traits::input_parameter< const std::vector<std::string> >::type col_files(col_filesSEXP);
    Rcpp::traits::input_parameter< const std::vector<std::string> >::type idx_files(idx_filesSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type num_factors(num_factorsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::Nullable<Rcpp::StringVector> >::type r_batch_names(r_batch_namesSEXP);
    Rcpp::traits::input_parameter< const Rcpp::Nullable<Rcpp::StringVector> >::type rows_restrict(rows_restrictSEXP);
    Rcpp::traits::input_parameter< const bool >::type rename_columns(rename_columnsSEXP);
    Rcpp::traits::input_parameter< const bool >::type take_union_rows(take_union_rowsSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type rseed(rseedSEXP);
    Rcpp::traits::input_parameter< const bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type NUM_THREADS(NUM_THREADSSEXP);
    Rcpp::traits::input_parameter< const double >::type CELL_NORM(CELL_NORMSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type BLOCK_SIZE(BLOCK_SIZESEXP);
    Rcpp::traits::input_parameter< const bool >::type do_batch_adj(do_batch_adjSEXP);
    Rcpp::traits::input_parameter< const bool >::type do_log1p(do_log1pSEXP);
    Rcpp::traits::input_parameter< const bool >::type do_down_sample(do_down_sampleSEXP);
    Rcpp::traits::input_parameter< const bool >::type save_aux_data(save_aux_dataSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type KNN_CELL(KNN_CELLSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type CELL_PER_SAMPLE(CELL_PER_SAMPLESEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type BATCH_ADJ_ITER(BATCH_ADJ_ITERSEXP);
    Rcpp::traits::input_parameter< const double >::type a0(a0SEXP);
    Rcpp::traits::input_parameter< const double >::type b0(b0SEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type MAX_ROW_WORD(MAX_ROW_WORDSEXP);
    Rcpp::traits::input_parameter< const char >::type ROW_WORD_SEP(ROW_WORD_SEPSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type MAX_COL_WORD(MAX_COL_WORDSEXP);
    Rcpp::traits::input_parameter< const char >::type COL_WORD_SEP(COL_WORD_SEPSEXP);
    rcpp_result_gen = Rcpp::wrap(asap_random_bulk_cbind_mtx(mtx_files, row_files, col_files, idx_files, num_factors, r_batch_names, rows_restrict, rename_columns, take_union_rows, rseed, verbose, NUM_THREADS, CELL_NORM, BLOCK_SIZE, do_batch_adj, do_log1p, do_down_sample, save_aux_data, KNN_CELL, CELL_PER_SAMPLE, BATCH_ADJ_ITER, a0, b0, MAX_ROW_WORD, ROW_WORD_SEP, MAX_COL_WORD, COL_WORD_SEP));
    return rcpp_result_gen;
END_RCPP
}
// asap_random_bulk_rbind_mtx
Rcpp::List asap_random_bulk_rbind_mtx(const std::vector<std::string> mtx_files, const std::vector<std::string> row_files, const std::vector<std::string> col_files, const std::vector<std::string> idx_files, const std::size_t num_factors, const std::size_t rseed, const bool verbose, const std::size_t NUM_THREADS, const double CELL_NORM, const std::size_t BLOCK_SIZE, const bool do_log1p, const bool do_down_sample, const bool save_rand_proj, const bool weighted_rand_proj, const std::size_t CELL_PER_SAMPLE, const double a0, const double b0, const std::size_t MAX_ROW_WORD, const char ROW_WORD_SEP, const std::size_t MAX_COL_WORD, const char COL_WORD_SEP);
RcppExport SEXP _asapR_asap_random_bulk_rbind_mtx(SEXP mtx_filesSEXP, SEXP row_filesSEXP, SEXP col_filesSEXP, SEXP idx_filesSEXP, SEXP num_factorsSEXP, SEXP rseedSEXP, SEXP verboseSEXP, SEXP NUM_THREADSSEXP, SEXP CELL_NORMSEXP, SEXP BLOCK_SIZESEXP, SEXP do_log1pSEXP, SEXP do_down_sampleSEXP, SEXP save_rand_projSEXP, SEXP weighted_rand_projSEXP, SEXP CELL_PER_SAMPLESEXP, SEXP a0SEXP, SEXP b0SEXP, SEXP MAX_ROW_WORDSEXP, SEXP ROW_WORD_SEPSEXP, SEXP MAX_COL_WORDSEXP, SEXP COL_WORD_SEPSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<std::string> >::type mtx_files(mtx_filesSEXP);
    Rcpp::traits::input_parameter< const std::vector<std::string> >::type row_files(row_filesSEXP);
    Rcpp::traits::input_parameter< const std::vector<std::string> >::type col_files(col_filesSEXP);
    Rcpp::traits::input_parameter< const std::vector<std::string> >::type idx_files(idx_filesSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type num_factors(num_factorsSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type rseed(rseedSEXP);
    Rcpp::traits::input_parameter< const bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type NUM_THREADS(NUM_THREADSSEXP);
    Rcpp::traits::input_parameter< const double >::type CELL_NORM(CELL_NORMSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type BLOCK_SIZE(BLOCK_SIZESEXP);
    Rcpp::traits::input_parameter< const bool >::type do_log1p(do_log1pSEXP);
    Rcpp::traits::input_parameter< const bool >::type do_down_sample(do_down_sampleSEXP);
    Rcpp::traits::input_parameter< const bool >::type save_rand_proj(save_rand_projSEXP);
    Rcpp::traits::input_parameter< const bool >::type weighted_rand_proj(weighted_rand_projSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type CELL_PER_SAMPLE(CELL_PER_SAMPLESEXP);
    Rcpp::traits::input_parameter< const double >::type a0(a0SEXP);
    Rcpp::traits::input_parameter< const double >::type b0(b0SEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type MAX_ROW_WORD(MAX_ROW_WORDSEXP);
    Rcpp::traits::input_parameter< const char >::type ROW_WORD_SEP(ROW_WORD_SEPSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type MAX_COL_WORD(MAX_COL_WORDSEXP);
    Rcpp::traits::input_parameter< const char >::type COL_WORD_SEP(COL_WORD_SEPSEXP);
    rcpp_result_gen = Rcpp::wrap(asap_random_bulk_rbind_mtx(mtx_files, row_files, col_files, idx_files, num_factors, rseed, verbose, NUM_THREADS, CELL_NORM, BLOCK_SIZE, do_log1p, do_down_sample, save_rand_proj, weighted_rand_proj, CELL_PER_SAMPLE, a0, b0, MAX_ROW_WORD, ROW_WORD_SEP, MAX_COL_WORD, COL_WORD_SEP));
    return rcpp_result_gen;
END_RCPP
}
// asap_fit_pmf
Rcpp::List asap_fit_pmf(const Eigen::MatrixXf Y_, const std::size_t maxK, const std::size_t max_iter, const bool verbose, const double a0, const double b0, const bool do_log1p, const std::size_t rseed, const bool svd_init, const bool do_degree_correction, const bool normalize_cols, const double EPS, const double jitter, const std::size_t NUM_THREADS);
RcppExport SEXP _asapR_asap_fit_pmf(SEXP Y_SEXP, SEXP maxKSEXP, SEXP max_iterSEXP, SEXP verboseSEXP, SEXP a0SEXP, SEXP b0SEXP, SEXP do_log1pSEXP, SEXP rseedSEXP, SEXP svd_initSEXP, SEXP do_degree_correctionSEXP, SEXP normalize_colsSEXP, SEXP EPSSEXP, SEXP jitterSEXP, SEXP NUM_THREADSSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXf >::type Y_(Y_SEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type maxK(maxKSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< const bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< const double >::type a0(a0SEXP);
    Rcpp::traits::input_parameter< const double >::type b0(b0SEXP);
    Rcpp::traits::input_parameter< const bool >::type do_log1p(do_log1pSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type rseed(rseedSEXP);
    Rcpp::traits::input_parameter< const bool >::type svd_init(svd_initSEXP);
    Rcpp::traits::input_parameter< const bool >::type do_degree_correction(do_degree_correctionSEXP);
    Rcpp::traits::input_parameter< const bool >::type normalize_cols(normalize_colsSEXP);
    Rcpp::traits::input_parameter< const double >::type EPS(EPSSEXP);
    Rcpp::traits::input_parameter< const double >::type jitter(jitterSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type NUM_THREADS(NUM_THREADSSEXP);
    rcpp_result_gen = Rcpp::wrap(asap_fit_pmf(Y_, maxK, max_iter, verbose, a0, b0, do_log1p, rseed, svd_init, do_degree_correction, normalize_cols, EPS, jitter, NUM_THREADS));
    return rcpp_result_gen;
END_RCPP
}
// asap_fit_pmf_cbind
Rcpp::List asap_fit_pmf_cbind(const std::vector<Eigen::MatrixXf> y_dn_vec, const std::size_t maxK, const std::size_t max_iter, const bool verbose, const double a0, const double b0, const bool do_log1p, const std::size_t rseed, const double EPS, const double jitter, const std::size_t NUM_THREADS);
RcppExport SEXP _asapR_asap_fit_pmf_cbind(SEXP y_dn_vecSEXP, SEXP maxKSEXP, SEXP max_iterSEXP, SEXP verboseSEXP, SEXP a0SEXP, SEXP b0SEXP, SEXP do_log1pSEXP, SEXP rseedSEXP, SEXP EPSSEXP, SEXP jitterSEXP, SEXP NUM_THREADSSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<Eigen::MatrixXf> >::type y_dn_vec(y_dn_vecSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type maxK(maxKSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< const bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< const double >::type a0(a0SEXP);
    Rcpp::traits::input_parameter< const double >::type b0(b0SEXP);
    Rcpp::traits::input_parameter< const bool >::type do_log1p(do_log1pSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type rseed(rseedSEXP);
    Rcpp::traits::input_parameter< const double >::type EPS(EPSSEXP);
    Rcpp::traits::input_parameter< const double >::type jitter(jitterSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type NUM_THREADS(NUM_THREADSSEXP);
    rcpp_result_gen = Rcpp::wrap(asap_fit_pmf_cbind(y_dn_vec, maxK, max_iter, verbose, a0, b0, do_log1p, rseed, EPS, jitter, NUM_THREADS));
    return rcpp_result_gen;
END_RCPP
}
// asap_fit_pmf_delta
Rcpp::List asap_fit_pmf_delta(const Eigen::MatrixXf y_ref, const std::vector<Eigen::MatrixXf> y_dn_vec, const std::size_t maxK, const std::size_t max_iter, const bool verbose, const double a0, const double b0, const bool do_log1p, const std::size_t rseed, const bool svd_init, const bool do_degree_correction, const bool normalize_cols, const double EPS, const double jitter, const std::size_t NUM_THREADS);
RcppExport SEXP _asapR_asap_fit_pmf_delta(SEXP y_refSEXP, SEXP y_dn_vecSEXP, SEXP maxKSEXP, SEXP max_iterSEXP, SEXP verboseSEXP, SEXP a0SEXP, SEXP b0SEXP, SEXP do_log1pSEXP, SEXP rseedSEXP, SEXP svd_initSEXP, SEXP do_degree_correctionSEXP, SEXP normalize_colsSEXP, SEXP EPSSEXP, SEXP jitterSEXP, SEXP NUM_THREADSSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXf >::type y_ref(y_refSEXP);
    Rcpp::traits::input_parameter< const std::vector<Eigen::MatrixXf> >::type y_dn_vec(y_dn_vecSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type maxK(maxKSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< const bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< const double >::type a0(a0SEXP);
    Rcpp::traits::input_parameter< const double >::type b0(b0SEXP);
    Rcpp::traits::input_parameter< const bool >::type do_log1p(do_log1pSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type rseed(rseedSEXP);
    Rcpp::traits::input_parameter< const bool >::type svd_init(svd_initSEXP);
    Rcpp::traits::input_parameter< const bool >::type do_degree_correction(do_degree_correctionSEXP);
    Rcpp::traits::input_parameter< const bool >::type normalize_cols(normalize_colsSEXP);
    Rcpp::traits::input_parameter< const double >::type EPS(EPSSEXP);
    Rcpp::traits::input_parameter< const double >::type jitter(jitterSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type NUM_THREADS(NUM_THREADSSEXP);
    rcpp_result_gen = Rcpp::wrap(asap_fit_pmf_delta(y_ref, y_dn_vec, maxK, max_iter, verbose, a0, b0, do_log1p, rseed, svd_init, do_degree_correction, normalize_cols, EPS, jitter, NUM_THREADS));
    return rcpp_result_gen;
END_RCPP
}
// asap_fit_pmf_larch
Rcpp::List asap_fit_pmf_larch(const Eigen::MatrixXf Y_, const std::size_t max_depth, const std::size_t max_iter, const bool verbose, const double a0, const double b0, const bool do_log1p, const std::size_t rseed, const bool svd_init, const bool do_degree_correction, const bool normalize_cols, const double EPS, const double jitter, const std::size_t NUM_THREADS);
RcppExport SEXP _asapR_asap_fit_pmf_larch(SEXP Y_SEXP, SEXP max_depthSEXP, SEXP max_iterSEXP, SEXP verboseSEXP, SEXP a0SEXP, SEXP b0SEXP, SEXP do_log1pSEXP, SEXP rseedSEXP, SEXP svd_initSEXP, SEXP do_degree_correctionSEXP, SEXP normalize_colsSEXP, SEXP EPSSEXP, SEXP jitterSEXP, SEXP NUM_THREADSSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXf >::type Y_(Y_SEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type max_depth(max_depthSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< const bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< const double >::type a0(a0SEXP);
    Rcpp::traits::input_parameter< const double >::type b0(b0SEXP);
    Rcpp::traits::input_parameter< const bool >::type do_log1p(do_log1pSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type rseed(rseedSEXP);
    Rcpp::traits::input_parameter< const bool >::type svd_init(svd_initSEXP);
    Rcpp::traits::input_parameter< const bool >::type do_degree_correction(do_degree_correctionSEXP);
    Rcpp::traits::input_parameter< const bool >::type normalize_cols(normalize_colsSEXP);
    Rcpp::traits::input_parameter< const double >::type EPS(EPSSEXP);
    Rcpp::traits::input_parameter< const double >::type jitter(jitterSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type NUM_THREADS(NUM_THREADSSEXP);
    rcpp_result_gen = Rcpp::wrap(asap_fit_pmf_larch(Y_, max_depth, max_iter, verbose, a0, b0, do_log1p, rseed, svd_init, do_degree_correction, normalize_cols, EPS, jitter, NUM_THREADS));
    return rcpp_result_gen;
END_RCPP
}
// asap_fit_pmf_linking
Rcpp::List asap_fit_pmf_linking(const Eigen::MatrixXf X_, const std::vector<Eigen::MatrixXf> y_dn_vec, const std::size_t maxK, const std::size_t max_iter, const bool verbose, const double a0, const double b0, const bool do_log1p, const std::size_t rseed, const bool svd_init, const bool do_degree_correction, const double EPS, const double jitter, const std::size_t NUM_THREADS);
RcppExport SEXP _asapR_asap_fit_pmf_linking(SEXP X_SEXP, SEXP y_dn_vecSEXP, SEXP maxKSEXP, SEXP max_iterSEXP, SEXP verboseSEXP, SEXP a0SEXP, SEXP b0SEXP, SEXP do_log1pSEXP, SEXP rseedSEXP, SEXP svd_initSEXP, SEXP do_degree_correctionSEXP, SEXP EPSSEXP, SEXP jitterSEXP, SEXP NUM_THREADSSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXf >::type X_(X_SEXP);
    Rcpp::traits::input_parameter< const std::vector<Eigen::MatrixXf> >::type y_dn_vec(y_dn_vecSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type maxK(maxKSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< const bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< const double >::type a0(a0SEXP);
    Rcpp::traits::input_parameter< const double >::type b0(b0SEXP);
    Rcpp::traits::input_parameter< const bool >::type do_log1p(do_log1pSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type rseed(rseedSEXP);
    Rcpp::traits::input_parameter< const bool >::type svd_init(svd_initSEXP);
    Rcpp::traits::input_parameter< const bool >::type do_degree_correction(do_degree_correctionSEXP);
    Rcpp::traits::input_parameter< const double >::type EPS(EPSSEXP);
    Rcpp::traits::input_parameter< const double >::type jitter(jitterSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type NUM_THREADS(NUM_THREADSSEXP);
    rcpp_result_gen = Rcpp::wrap(asap_fit_pmf_linking(X_, y_dn_vec, maxK, max_iter, verbose, a0, b0, do_log1p, rseed, svd_init, do_degree_correction, EPS, jitter, NUM_THREADS));
    return rcpp_result_gen;
END_RCPP
}
// asap_fit_pmf_rbind
Rcpp::List asap_fit_pmf_rbind(const std::vector<Eigen::MatrixXf> y_dn_vec, const std::size_t maxK, const std::size_t max_iter, const bool verbose, const double a0, const double b0, const bool do_log1p, const std::size_t rseed, const double EPS, const double jitter, const std::size_t NUM_THREADS);
RcppExport SEXP _asapR_asap_fit_pmf_rbind(SEXP y_dn_vecSEXP, SEXP maxKSEXP, SEXP max_iterSEXP, SEXP verboseSEXP, SEXP a0SEXP, SEXP b0SEXP, SEXP do_log1pSEXP, SEXP rseedSEXP, SEXP EPSSEXP, SEXP jitterSEXP, SEXP NUM_THREADSSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<Eigen::MatrixXf> >::type y_dn_vec(y_dn_vecSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type maxK(maxKSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< const bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< const double >::type a0(a0SEXP);
    Rcpp::traits::input_parameter< const double >::type b0(b0SEXP);
    Rcpp::traits::input_parameter< const bool >::type do_log1p(do_log1pSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type rseed(rseedSEXP);
    Rcpp::traits::input_parameter< const double >::type EPS(EPSSEXP);
    Rcpp::traits::input_parameter< const double >::type jitter(jitterSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type NUM_THREADS(NUM_THREADSSEXP);
    rcpp_result_gen = Rcpp::wrap(asap_fit_pmf_rbind(y_dn_vec, maxK, max_iter, verbose, a0, b0, do_log1p, rseed, EPS, jitter, NUM_THREADS));
    return rcpp_result_gen;
END_RCPP
}
// asap_topic_pmf
Rcpp::List asap_topic_pmf(const Eigen::MatrixXf beta_dk, const Eigen::MatrixXf R_nk, const Eigen::MatrixXf Y_n, const double a0, const double b0, const std::size_t max_iter, const std::size_t NUM_THREADS, const bool stdize_r, const bool verbose);
RcppExport SEXP _asapR_asap_topic_pmf(SEXP beta_dkSEXP, SEXP R_nkSEXP, SEXP Y_nSEXP, SEXP a0SEXP, SEXP b0SEXP, SEXP max_iterSEXP, SEXP NUM_THREADSSEXP, SEXP stdize_rSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXf >::type beta_dk(beta_dkSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXf >::type R_nk(R_nkSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXf >::type Y_n(Y_nSEXP);
    Rcpp::traits::input_parameter< const double >::type a0(a0SEXP);
    Rcpp::traits::input_parameter< const double >::type b0(b0SEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type NUM_THREADS(NUM_THREADSSEXP);
    Rcpp::traits::input_parameter< const bool >::type stdize_r(stdize_rSEXP);
    Rcpp::traits::input_parameter< const bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(asap_topic_pmf(beta_dk, R_nk, Y_n, a0, b0, max_iter, NUM_THREADS, stdize_r, verbose));
    return rcpp_result_gen;
END_RCPP
}
// asap_pmf_stat
Rcpp::List asap_pmf_stat(const Eigen::SparseMatrix<float>& y_dn, const Eigen::MatrixXf log_beta, const Rcpp::StringVector beta_row_names, const Rcpp::Nullable<Eigen::MatrixXf> r_log_delta, const bool do_stdize_beta, const bool do_log1p, const bool verbose, const std::size_t NUM_THREADS, const double CELL_NORM, const std::size_t BLOCK_SIZE);
RcppExport SEXP _asapR_asap_pmf_stat(SEXP y_dnSEXP, SEXP log_betaSEXP, SEXP beta_row_namesSEXP, SEXP r_log_deltaSEXP, SEXP do_stdize_betaSEXP, SEXP do_log1pSEXP, SEXP verboseSEXP, SEXP NUM_THREADSSEXP, SEXP CELL_NORMSEXP, SEXP BLOCK_SIZESEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::SparseMatrix<float>& >::type y_dn(y_dnSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXf >::type log_beta(log_betaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::StringVector >::type beta_row_names(beta_row_namesSEXP);
    Rcpp::traits::input_parameter< const Rcpp::Nullable<Eigen::MatrixXf> >::type r_log_delta(r_log_deltaSEXP);
    Rcpp::traits::input_parameter< const bool >::type do_stdize_beta(do_stdize_betaSEXP);
    Rcpp::traits::input_parameter< const bool >::type do_log1p(do_log1pSEXP);
    Rcpp::traits::input_parameter< const bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type NUM_THREADS(NUM_THREADSSEXP);
    Rcpp::traits::input_parameter< const double >::type CELL_NORM(CELL_NORMSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type BLOCK_SIZE(BLOCK_SIZESEXP);
    rcpp_result_gen = Rcpp::wrap(asap_pmf_stat(y_dn, log_beta, beta_row_names, r_log_delta, do_stdize_beta, do_log1p, verbose, NUM_THREADS, CELL_NORM, BLOCK_SIZE));
    return rcpp_result_gen;
END_RCPP
}
// asap_pmf_stat_mtx
Rcpp::List asap_pmf_stat_mtx(const std::string mtx_file, const std::string row_file, const std::string col_file, const std::string idx_file, const Eigen::MatrixXf log_beta, const Rcpp::StringVector beta_row_names, const Rcpp::Nullable<Eigen::MatrixXf> r_log_delta, const bool do_stdize_beta, const bool do_log1p, const bool verbose, const std::size_t NUM_THREADS, const double CELL_NORM, const std::size_t BLOCK_SIZE, const std::size_t MAX_ROW_WORD, const char ROW_WORD_SEP, const std::size_t MAX_COL_WORD, const char COL_WORD_SEP);
RcppExport SEXP _asapR_asap_pmf_stat_mtx(SEXP mtx_fileSEXP, SEXP row_fileSEXP, SEXP col_fileSEXP, SEXP idx_fileSEXP, SEXP log_betaSEXP, SEXP beta_row_namesSEXP, SEXP r_log_deltaSEXP, SEXP do_stdize_betaSEXP, SEXP do_log1pSEXP, SEXP verboseSEXP, SEXP NUM_THREADSSEXP, SEXP CELL_NORMSEXP, SEXP BLOCK_SIZESEXP, SEXP MAX_ROW_WORDSEXP, SEXP ROW_WORD_SEPSEXP, SEXP MAX_COL_WORDSEXP, SEXP COL_WORD_SEPSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string >::type mtx_file(mtx_fileSEXP);
    Rcpp::traits::input_parameter< const std::string >::type row_file(row_fileSEXP);
    Rcpp::traits::input_parameter< const std::string >::type col_file(col_fileSEXP);
    Rcpp::traits::input_parameter< const std::string >::type idx_file(idx_fileSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXf >::type log_beta(log_betaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::StringVector >::type beta_row_names(beta_row_namesSEXP);
    Rcpp::traits::input_parameter< const Rcpp::Nullable<Eigen::MatrixXf> >::type r_log_delta(r_log_deltaSEXP);
    Rcpp::traits::input_parameter< const bool >::type do_stdize_beta(do_stdize_betaSEXP);
    Rcpp::traits::input_parameter< const bool >::type do_log1p(do_log1pSEXP);
    Rcpp::traits::input_parameter< const bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type NUM_THREADS(NUM_THREADSSEXP);
    Rcpp::traits::input_parameter< const double >::type CELL_NORM(CELL_NORMSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type BLOCK_SIZE(BLOCK_SIZESEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type MAX_ROW_WORD(MAX_ROW_WORDSEXP);
    Rcpp::traits::input_parameter< const char >::type ROW_WORD_SEP(ROW_WORD_SEPSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type MAX_COL_WORD(MAX_COL_WORDSEXP);
    Rcpp::traits::input_parameter< const char >::type COL_WORD_SEP(COL_WORD_SEPSEXP);
    rcpp_result_gen = Rcpp::wrap(asap_pmf_stat_mtx(mtx_file, row_file, col_file, idx_file, log_beta, beta_row_names, r_log_delta, do_stdize_beta, do_log1p, verbose, NUM_THREADS, CELL_NORM, BLOCK_SIZE, MAX_ROW_WORD, ROW_WORD_SEP, MAX_COL_WORD, COL_WORD_SEP));
    return rcpp_result_gen;
END_RCPP
}
// asap_pmf_stat_cbind_mtx
Rcpp::List asap_pmf_stat_cbind_mtx(const std::vector<std::string> mtx_files, const std::vector<std::string> row_files, const std::vector<std::string> col_files, const std::vector<std::string> idx_files, const Eigen::MatrixXf log_beta, const Rcpp::StringVector beta_row_names, const Rcpp::Nullable<Eigen::MatrixXf> log_delta, const Rcpp::Nullable<Eigen::MatrixXf> r_batch_names, const bool rename_columns, const bool do_stdize_beta, const bool do_log1p, const bool verbose, const std::size_t NUM_THREADS, const std::size_t BLOCK_SIZE, const std::size_t MAX_ROW_WORD, const char ROW_WORD_SEP, const std::size_t MAX_COL_WORD, const char COL_WORD_SEP);
RcppExport SEXP _asapR_asap_pmf_stat_cbind_mtx(SEXP mtx_filesSEXP, SEXP row_filesSEXP, SEXP col_filesSEXP, SEXP idx_filesSEXP, SEXP log_betaSEXP, SEXP beta_row_namesSEXP, SEXP log_deltaSEXP, SEXP r_batch_namesSEXP, SEXP rename_columnsSEXP, SEXP do_stdize_betaSEXP, SEXP do_log1pSEXP, SEXP verboseSEXP, SEXP NUM_THREADSSEXP, SEXP BLOCK_SIZESEXP, SEXP MAX_ROW_WORDSEXP, SEXP ROW_WORD_SEPSEXP, SEXP MAX_COL_WORDSEXP, SEXP COL_WORD_SEPSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<std::string> >::type mtx_files(mtx_filesSEXP);
    Rcpp::traits::input_parameter< const std::vector<std::string> >::type row_files(row_filesSEXP);
    Rcpp::traits::input_parameter< const std::vector<std::string> >::type col_files(col_filesSEXP);
    Rcpp::traits::input_parameter< const std::vector<std::string> >::type idx_files(idx_filesSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXf >::type log_beta(log_betaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::StringVector >::type beta_row_names(beta_row_namesSEXP);
    Rcpp::traits::input_parameter< const Rcpp::Nullable<Eigen::MatrixXf> >::type log_delta(log_deltaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::Nullable<Eigen::MatrixXf> >::type r_batch_names(r_batch_namesSEXP);
    Rcpp::traits::input_parameter< const bool >::type rename_columns(rename_columnsSEXP);
    Rcpp::traits::input_parameter< const bool >::type do_stdize_beta(do_stdize_betaSEXP);
    Rcpp::traits::input_parameter< const bool >::type do_log1p(do_log1pSEXP);
    Rcpp::traits::input_parameter< const bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type NUM_THREADS(NUM_THREADSSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type BLOCK_SIZE(BLOCK_SIZESEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type MAX_ROW_WORD(MAX_ROW_WORDSEXP);
    Rcpp::traits::input_parameter< const char >::type ROW_WORD_SEP(ROW_WORD_SEPSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type MAX_COL_WORD(MAX_COL_WORDSEXP);
    Rcpp::traits::input_parameter< const char >::type COL_WORD_SEP(COL_WORD_SEPSEXP);
    rcpp_result_gen = Rcpp::wrap(asap_pmf_stat_cbind_mtx(mtx_files, row_files, col_files, idx_files, log_beta, beta_row_names, log_delta, r_batch_names, rename_columns, do_stdize_beta, do_log1p, verbose, NUM_THREADS, BLOCK_SIZE, MAX_ROW_WORD, ROW_WORD_SEP, MAX_COL_WORD, COL_WORD_SEP));
    return rcpp_result_gen;
END_RCPP
}
// asap_topic_pmf_rbind
Rcpp::List asap_topic_pmf_rbind(const std::vector<Eigen::MatrixXf> beta_dk_list, const std::vector<Eigen::MatrixXf> R_nk_list, const std::vector<Eigen::MatrixXf> Y_n_list, const double a0, const double b0, const std::size_t max_iter, const std::size_t NUM_THREADS, const bool stdize_r, const bool verbose);
RcppExport SEXP _asapR_asap_topic_pmf_rbind(SEXP beta_dk_listSEXP, SEXP R_nk_listSEXP, SEXP Y_n_listSEXP, SEXP a0SEXP, SEXP b0SEXP, SEXP max_iterSEXP, SEXP NUM_THREADSSEXP, SEXP stdize_rSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<Eigen::MatrixXf> >::type beta_dk_list(beta_dk_listSEXP);
    Rcpp::traits::input_parameter< const std::vector<Eigen::MatrixXf> >::type R_nk_list(R_nk_listSEXP);
    Rcpp::traits::input_parameter< const std::vector<Eigen::MatrixXf> >::type Y_n_list(Y_n_listSEXP);
    Rcpp::traits::input_parameter< const double >::type a0(a0SEXP);
    Rcpp::traits::input_parameter< const double >::type b0(b0SEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type NUM_THREADS(NUM_THREADSSEXP);
    Rcpp::traits::input_parameter< const bool >::type stdize_r(stdize_rSEXP);
    Rcpp::traits::input_parameter< const bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(asap_topic_pmf_rbind(beta_dk_list, R_nk_list, Y_n_list, a0, b0, max_iter, NUM_THREADS, stdize_r, verbose));
    return rcpp_result_gen;
END_RCPP
}
// asap_pmf_stat_rbind
Rcpp::List asap_pmf_stat_rbind(const std::vector<std::string> mtx_files, const std::vector<std::string> row_files, const std::vector<std::string> col_files, const std::vector<std::string> idx_files, const std::vector<Eigen::MatrixXf> log_beta_vec, const std::vector<Rcpp::StringVector> beta_row_names_vec, const bool do_stdize_beta, const bool do_log1p, const bool verbose, const std::size_t NUM_THREADS, const std::size_t BLOCK_SIZE, const std::size_t MAX_ROW_WORD, const char ROW_WORD_SEP, const std::size_t MAX_COL_WORD, const char COL_WORD_SEP);
RcppExport SEXP _asapR_asap_pmf_stat_rbind(SEXP mtx_filesSEXP, SEXP row_filesSEXP, SEXP col_filesSEXP, SEXP idx_filesSEXP, SEXP log_beta_vecSEXP, SEXP beta_row_names_vecSEXP, SEXP do_stdize_betaSEXP, SEXP do_log1pSEXP, SEXP verboseSEXP, SEXP NUM_THREADSSEXP, SEXP BLOCK_SIZESEXP, SEXP MAX_ROW_WORDSEXP, SEXP ROW_WORD_SEPSEXP, SEXP MAX_COL_WORDSEXP, SEXP COL_WORD_SEPSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<std::string> >::type mtx_files(mtx_filesSEXP);
    Rcpp::traits::input_parameter< const std::vector<std::string> >::type row_files(row_filesSEXP);
    Rcpp::traits::input_parameter< const std::vector<std::string> >::type col_files(col_filesSEXP);
    Rcpp::traits::input_parameter< const std::vector<std::string> >::type idx_files(idx_filesSEXP);
    Rcpp::traits::input_parameter< const std::vector<Eigen::MatrixXf> >::type log_beta_vec(log_beta_vecSEXP);
    Rcpp::traits::input_parameter< const std::vector<Rcpp::StringVector> >::type beta_row_names_vec(beta_row_names_vecSEXP);
    Rcpp::traits::input_parameter< const bool >::type do_stdize_beta(do_stdize_betaSEXP);
    Rcpp::traits::input_parameter< const bool >::type do_log1p(do_log1pSEXP);
    Rcpp::traits::input_parameter< const bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type NUM_THREADS(NUM_THREADSSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type BLOCK_SIZE(BLOCK_SIZESEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type MAX_ROW_WORD(MAX_ROW_WORDSEXP);
    Rcpp::traits::input_parameter< const char >::type ROW_WORD_SEP(ROW_WORD_SEPSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type MAX_COL_WORD(MAX_COL_WORDSEXP);
    Rcpp::traits::input_parameter< const char >::type COL_WORD_SEP(COL_WORD_SEPSEXP);
    rcpp_result_gen = Rcpp::wrap(asap_pmf_stat_rbind(mtx_files, row_files, col_files, idx_files, log_beta_vec, beta_row_names_vec, do_stdize_beta, do_log1p, verbose, NUM_THREADS, BLOCK_SIZE, MAX_ROW_WORD, ROW_WORD_SEP, MAX_COL_WORD, COL_WORD_SEP));
    return rcpp_result_gen;
END_RCPP
}
// stretch_matrix_columns
Rcpp::NumericMatrix stretch_matrix_columns(const Eigen::MatrixXf Y, const double qq_min, const double qq_max, const double std_min, const double std_max, const bool verbose);
RcppExport SEXP _asapR_stretch_matrix_columns(SEXP YSEXP, SEXP qq_minSEXP, SEXP qq_maxSEXP, SEXP std_minSEXP, SEXP std_maxSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXf >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const double >::type qq_min(qq_minSEXP);
    Rcpp::traits::input_parameter< const double >::type qq_max(qq_maxSEXP);
    Rcpp::traits::input_parameter< const double >::type std_min(std_minSEXP);
    Rcpp::traits::input_parameter< const double >::type std_max(std_maxSEXP);
    Rcpp::traits::input_parameter< const bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(stretch_matrix_columns(Y, qq_min, qq_max, std_min, std_max, verbose));
    return rcpp_result_gen;
END_RCPP
}
// fit_poisson_cluster_rows
Rcpp::List fit_poisson_cluster_rows(const Eigen::MatrixXf X, const std::size_t Ltrunc, const double alpha, const double a0, const double b0, const std::size_t rseed, const std::size_t mcmc, const std::size_t burnin, const bool verbose);
RcppExport SEXP _asapR_fit_poisson_cluster_rows(SEXP XSEXP, SEXP LtruncSEXP, SEXP alphaSEXP, SEXP a0SEXP, SEXP b0SEXP, SEXP rseedSEXP, SEXP mcmcSEXP, SEXP burninSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXf >::type X(XSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type Ltrunc(LtruncSEXP);
    Rcpp::traits::input_parameter< const double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const double >::type a0(a0SEXP);
    Rcpp::traits::input_parameter< const double >::type b0(b0SEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type rseed(rseedSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type mcmc(mcmcSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type burnin(burninSEXP);
    Rcpp::traits::input_parameter< const bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(fit_poisson_cluster_rows(X, Ltrunc, alpha, a0, b0, rseed, mcmc, burnin, verbose));
    return rcpp_result_gen;
END_RCPP
}
// collapse_network
Rcpp::List collapse_network(const Rcpp::List W_nn_list, const Rcpp::IntegerVector r_positions, const std::size_t N, const std::size_t S, const bool verbose);
RcppExport SEXP _asapR_collapse_network(SEXP W_nn_listSEXP, SEXP r_positionsSEXP, SEXP NSEXP, SEXP SSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List >::type W_nn_list(W_nn_listSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector >::type r_positions(r_positionsSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type N(NSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type S(SSEXP);
    Rcpp::traits::input_parameter< const bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(collapse_network(W_nn_list, r_positions, N, S, verbose));
    return rcpp_result_gen;
END_RCPP
}
// decompose_network
Rcpp::List decompose_network(const Eigen::SparseMatrix<double, Eigen::ColMajor> A_dd, const Eigen::MatrixXd beta_dt, const double cutoff, const bool verbose);
RcppExport SEXP _asapR_decompose_network(SEXP A_ddSEXP, SEXP beta_dtSEXP, SEXP cutoffSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::SparseMatrix<double, Eigen::ColMajor> >::type A_dd(A_ddSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type beta_dt(beta_dtSEXP);
    Rcpp::traits::input_parameter< const double >::type cutoff(cutoffSEXP);
    Rcpp::traits::input_parameter< const bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(decompose_network(A_dd, beta_dt, cutoff, verbose));
    return rcpp_result_gen;
END_RCPP
}
// mmutil_copy_selected_rows
Rcpp::List mmutil_copy_selected_rows(const std::string mtx_file, const std::string row_file, const std::string col_file, const Rcpp::StringVector r_selected, const std::string output, const std::size_t MAX_ROW_WORD, const char ROW_WORD_SEP, const std::size_t MAX_COL_WORD, const char COL_WORD_SEP);
RcppExport SEXP _asapR_mmutil_copy_selected_rows(SEXP mtx_fileSEXP, SEXP row_fileSEXP, SEXP col_fileSEXP, SEXP r_selectedSEXP, SEXP outputSEXP, SEXP MAX_ROW_WORDSEXP, SEXP ROW_WORD_SEPSEXP, SEXP MAX_COL_WORDSEXP, SEXP COL_WORD_SEPSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string >::type mtx_file(mtx_fileSEXP);
    Rcpp::traits::input_parameter< const std::string >::type row_file(row_fileSEXP);
    Rcpp::traits::input_parameter< const std::string >::type col_file(col_fileSEXP);
    Rcpp::traits::input_parameter< const Rcpp::StringVector >::type r_selected(r_selectedSEXP);
    Rcpp::traits::input_parameter< const std::string >::type output(outputSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type MAX_ROW_WORD(MAX_ROW_WORDSEXP);
    Rcpp::traits::input_parameter< const char >::type ROW_WORD_SEP(ROW_WORD_SEPSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type MAX_COL_WORD(MAX_COL_WORDSEXP);
    Rcpp::traits::input_parameter< const char >::type COL_WORD_SEP(COL_WORD_SEPSEXP);
    rcpp_result_gen = Rcpp::wrap(mmutil_copy_selected_rows(mtx_file, row_file, col_file, r_selected, output, MAX_ROW_WORD, ROW_WORD_SEP, MAX_COL_WORD, COL_WORD_SEP));
    return rcpp_result_gen;
END_RCPP
}
// mmutil_copy_selected_columns
Rcpp::List mmutil_copy_selected_columns(const std::string mtx_file, const std::string row_file, const std::string col_file, const Rcpp::StringVector& r_selected, const std::string output, const std::size_t MAX_COL_WORD, const char COL_WORD_SEP);
RcppExport SEXP _asapR_mmutil_copy_selected_columns(SEXP mtx_fileSEXP, SEXP row_fileSEXP, SEXP col_fileSEXP, SEXP r_selectedSEXP, SEXP outputSEXP, SEXP MAX_COL_WORDSEXP, SEXP COL_WORD_SEPSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string >::type mtx_file(mtx_fileSEXP);
    Rcpp::traits::input_parameter< const std::string >::type row_file(row_fileSEXP);
    Rcpp::traits::input_parameter< const std::string >::type col_file(col_fileSEXP);
    Rcpp::traits::input_parameter< const Rcpp::StringVector& >::type r_selected(r_selectedSEXP);
    Rcpp::traits::input_parameter< const std::string >::type output(outputSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type MAX_COL_WORD(MAX_COL_WORDSEXP);
    Rcpp::traits::input_parameter< const char >::type COL_WORD_SEP(COL_WORD_SEPSEXP);
    rcpp_result_gen = Rcpp::wrap(mmutil_copy_selected_columns(mtx_file, row_file, col_file, r_selected, output, MAX_COL_WORD, COL_WORD_SEP));
    return rcpp_result_gen;
END_RCPP
}
// mmutil_build_index
int mmutil_build_index(const std::string mtx_file, const std::string index_file);
RcppExport SEXP _asapR_mmutil_build_index(SEXP mtx_fileSEXP, SEXP index_fileSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string >::type mtx_file(mtx_fileSEXP);
    Rcpp::traits::input_parameter< const std::string >::type index_file(index_fileSEXP);
    rcpp_result_gen = Rcpp::wrap(mmutil_build_index(mtx_file, index_file));
    return rcpp_result_gen;
END_RCPP
}
// mmutil_read_index
Rcpp::NumericVector mmutil_read_index(const std::string index_file);
RcppExport SEXP _asapR_mmutil_read_index(SEXP index_fileSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string >::type index_file(index_fileSEXP);
    rcpp_result_gen = Rcpp::wrap(mmutil_read_index(index_file));
    return rcpp_result_gen;
END_RCPP
}
// mmutil_check_index
bool mmutil_check_index(const std::string mtx_file, const Rcpp::NumericVector index_tab);
RcppExport SEXP _asapR_mmutil_check_index(SEXP mtx_fileSEXP, SEXP index_tabSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string >::type mtx_file(mtx_fileSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector >::type index_tab(index_tabSEXP);
    rcpp_result_gen = Rcpp::wrap(mmutil_check_index(mtx_file, index_tab));
    return rcpp_result_gen;
END_RCPP
}
// mmutil_info
Rcpp::List mmutil_info(const std::string mtx_file);
RcppExport SEXP _asapR_mmutil_info(SEXP mtx_fileSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string >::type mtx_file(mtx_fileSEXP);
    rcpp_result_gen = Rcpp::wrap(mmutil_info(mtx_file));
    return rcpp_result_gen;
END_RCPP
}
// mmutil_rownames
std::vector<std::string> mmutil_rownames(const std::string row_file, const std::size_t MAX_ROW_WORD, const char ROW_WORD_SEP);
RcppExport SEXP _asapR_mmutil_rownames(SEXP row_fileSEXP, SEXP MAX_ROW_WORDSEXP, SEXP ROW_WORD_SEPSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string >::type row_file(row_fileSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type MAX_ROW_WORD(MAX_ROW_WORDSEXP);
    Rcpp::traits::input_parameter< const char >::type ROW_WORD_SEP(ROW_WORD_SEPSEXP);
    rcpp_result_gen = Rcpp::wrap(mmutil_rownames(row_file, MAX_ROW_WORD, ROW_WORD_SEP));
    return rcpp_result_gen;
END_RCPP
}
// mmutil_colnames
std::vector<std::string> mmutil_colnames(const std::string col_file, const std::size_t MAX_COL_WORD, const char COL_WORD_SEP);
RcppExport SEXP _asapR_mmutil_colnames(SEXP col_fileSEXP, SEXP MAX_COL_WORDSEXP, SEXP COL_WORD_SEPSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string >::type col_file(col_fileSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type MAX_COL_WORD(MAX_COL_WORDSEXP);
    Rcpp::traits::input_parameter< const char >::type COL_WORD_SEP(COL_WORD_SEPSEXP);
    rcpp_result_gen = Rcpp::wrap(mmutil_colnames(col_file, MAX_COL_WORD, COL_WORD_SEP));
    return rcpp_result_gen;
END_RCPP
}
// mmutil_write_mtx
int mmutil_write_mtx(const Eigen::SparseMatrix<float, Eigen::ColMajor> X, const std::string mtx_file);
RcppExport SEXP _asapR_mmutil_write_mtx(SEXP XSEXP, SEXP mtx_fileSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::SparseMatrix<float, Eigen::ColMajor> >::type X(XSEXP);
    Rcpp::traits::input_parameter< const std::string >::type mtx_file(mtx_fileSEXP);
    rcpp_result_gen = Rcpp::wrap(mmutil_write_mtx(X, mtx_file));
    return rcpp_result_gen;
END_RCPP
}
// mmutil_read_columns_sparse
Rcpp::List mmutil_read_columns_sparse(const std::string mtx_file, const Rcpp::NumericVector& memory_location, const Rcpp::NumericVector& r_column_index, const bool verbose);
RcppExport SEXP _asapR_mmutil_read_columns_sparse(SEXP mtx_fileSEXP, SEXP memory_locationSEXP, SEXP r_column_indexSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string >::type mtx_file(mtx_fileSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type memory_location(memory_locationSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type r_column_index(r_column_indexSEXP);
    Rcpp::traits::input_parameter< const bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(mmutil_read_columns_sparse(mtx_file, memory_location, r_column_index, verbose));
    return rcpp_result_gen;
END_RCPP
}
// mmutil_read_columns
Rcpp::NumericMatrix mmutil_read_columns(const std::string mtx_file, const Rcpp::NumericVector& memory_location, const Rcpp::NumericVector& r_column_index, const bool verbose);
RcppExport SEXP _asapR_mmutil_read_columns(SEXP mtx_fileSEXP, SEXP memory_locationSEXP, SEXP r_column_indexSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string >::type mtx_file(mtx_fileSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type memory_location(memory_locationSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type r_column_index(r_column_indexSEXP);
    Rcpp::traits::input_parameter< const bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(mmutil_read_columns(mtx_file, memory_location, r_column_index, verbose));
    return rcpp_result_gen;
END_RCPP
}
// mmutil_read_rows_columns
Rcpp::NumericMatrix mmutil_read_rows_columns(const std::string mtx_file, const Rcpp::NumericVector& memory_location, const Rcpp::NumericVector& r_row_index, const Rcpp::NumericVector& r_column_index, const bool verbose);
RcppExport SEXP _asapR_mmutil_read_rows_columns(SEXP mtx_fileSEXP, SEXP memory_locationSEXP, SEXP r_row_indexSEXP, SEXP r_column_indexSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string >::type mtx_file(mtx_fileSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type memory_location(memory_locationSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type r_row_index(r_row_indexSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type r_column_index(r_column_indexSEXP);
    Rcpp::traits::input_parameter< const bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(mmutil_read_rows_columns(mtx_file, memory_location, r_row_index, r_column_index, verbose));
    return rcpp_result_gen;
END_RCPP
}
// mmutil_simulate_poisson_mixture
Rcpp::List mmutil_simulate_poisson_mixture(const Rcpp::List r_mu_list, const std::size_t Ncell, const std::string output, const float dir_alpha, const float gam_alpha, const float gam_beta, const std::size_t rseed, const std::size_t MAX_COL_WORD, const char COL_WORD_SEP);
RcppExport SEXP _asapR_mmutil_simulate_poisson_mixture(SEXP r_mu_listSEXP, SEXP NcellSEXP, SEXP outputSEXP, SEXP dir_alphaSEXP, SEXP gam_alphaSEXP, SEXP gam_betaSEXP, SEXP rseedSEXP, SEXP MAX_COL_WORDSEXP, SEXP COL_WORD_SEPSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List >::type r_mu_list(r_mu_listSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type Ncell(NcellSEXP);
    Rcpp::traits::input_parameter< const std::string >::type output(outputSEXP);
    Rcpp::traits::input_parameter< const float >::type dir_alpha(dir_alphaSEXP);
    Rcpp::traits::input_parameter< const float >::type gam_alpha(gam_alphaSEXP);
    Rcpp::traits::input_parameter< const float >::type gam_beta(gam_betaSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type rseed(rseedSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type MAX_COL_WORD(MAX_COL_WORDSEXP);
    Rcpp::traits::input_parameter< const char >::type COL_WORD_SEP(COL_WORD_SEPSEXP);
    rcpp_result_gen = Rcpp::wrap(mmutil_simulate_poisson_mixture(r_mu_list, Ncell, output, dir_alpha, gam_alpha, gam_beta, rseed, MAX_COL_WORD, COL_WORD_SEP));
    return rcpp_result_gen;
END_RCPP
}
// mmutil_simulate_poisson
Rcpp::List mmutil_simulate_poisson(const Eigen::MatrixXf mu, const Eigen::VectorXf rho, const std::string output, Rcpp::Nullable<Rcpp::IntegerVector> r_indv, const std::size_t rseed, const std::size_t MAX_COL_WORD, const char COL_WORD_SEP);
RcppExport SEXP _asapR_mmutil_simulate_poisson(SEXP muSEXP, SEXP rhoSEXP, SEXP outputSEXP, SEXP r_indvSEXP, SEXP rseedSEXP, SEXP MAX_COL_WORDSEXP, SEXP COL_WORD_SEPSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXf >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXf >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< const std::string >::type output(outputSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::IntegerVector> >::type r_indv(r_indvSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type rseed(rseedSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type MAX_COL_WORD(MAX_COL_WORDSEXP);
    Rcpp::traits::input_parameter< const char >::type COL_WORD_SEP(COL_WORD_SEPSEXP);
    rcpp_result_gen = Rcpp::wrap(mmutil_simulate_poisson(mu, rho, output, r_indv, rseed, MAX_COL_WORD, COL_WORD_SEP));
    return rcpp_result_gen;
END_RCPP
}
// pbt_dependency_matrix
Eigen::MatrixXf pbt_dependency_matrix(const std::size_t depth);
RcppExport SEXP _asapR_pbt_dependency_matrix(SEXP depthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::size_t >::type depth(depthSEXP);
    rcpp_result_gen = Rcpp::wrap(pbt_dependency_matrix(depth));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_asapR_asap_bbknn", (DL_FUNC) &_asapR_asap_bbknn, 6},
    {"_asapR_asap_build_interaction", (DL_FUNC) &_asapR_asap_build_interaction, 12},
    {"_asapR_asap_build_interaction_mtx", (DL_FUNC) &_asapR_asap_build_interaction_mtx, 22},
    {"_asapR_asap_interaction_random_bulk", (DL_FUNC) &_asapR_asap_interaction_random_bulk, 28},
    {"_asapR_asap_interaction_pmf_stat_mtx", (DL_FUNC) &_asapR_asap_interaction_pmf_stat_mtx, 22},
    {"_asapR_asap_random_bulk_mtx", (DL_FUNC) &_asapR_asap_random_bulk_mtx, 24},
    {"_asapR_asap_random_bulk_cbind", (DL_FUNC) &_asapR_asap_random_bulk_cbind, 18},
    {"_asapR_asap_random_bulk_cbind_mtx", (DL_FUNC) &_asapR_asap_random_bulk_cbind_mtx, 27},
    {"_asapR_asap_random_bulk_rbind_mtx", (DL_FUNC) &_asapR_asap_random_bulk_rbind_mtx, 21},
    {"_asapR_asap_fit_pmf", (DL_FUNC) &_asapR_asap_fit_pmf, 14},
    {"_asapR_asap_fit_pmf_cbind", (DL_FUNC) &_asapR_asap_fit_pmf_cbind, 11},
    {"_asapR_asap_fit_pmf_delta", (DL_FUNC) &_asapR_asap_fit_pmf_delta, 15},
    {"_asapR_asap_fit_pmf_larch", (DL_FUNC) &_asapR_asap_fit_pmf_larch, 14},
    {"_asapR_asap_fit_pmf_linking", (DL_FUNC) &_asapR_asap_fit_pmf_linking, 14},
    {"_asapR_asap_fit_pmf_rbind", (DL_FUNC) &_asapR_asap_fit_pmf_rbind, 11},
    {"_asapR_asap_topic_pmf", (DL_FUNC) &_asapR_asap_topic_pmf, 9},
    {"_asapR_asap_pmf_stat", (DL_FUNC) &_asapR_asap_pmf_stat, 10},
    {"_asapR_asap_pmf_stat_mtx", (DL_FUNC) &_asapR_asap_pmf_stat_mtx, 17},
    {"_asapR_asap_pmf_stat_cbind_mtx", (DL_FUNC) &_asapR_asap_pmf_stat_cbind_mtx, 18},
    {"_asapR_asap_topic_pmf_rbind", (DL_FUNC) &_asapR_asap_topic_pmf_rbind, 9},
    {"_asapR_asap_pmf_stat_rbind", (DL_FUNC) &_asapR_asap_pmf_stat_rbind, 15},
    {"_asapR_stretch_matrix_columns", (DL_FUNC) &_asapR_stretch_matrix_columns, 6},
    {"_asapR_fit_poisson_cluster_rows", (DL_FUNC) &_asapR_fit_poisson_cluster_rows, 9},
    {"_asapR_collapse_network", (DL_FUNC) &_asapR_collapse_network, 5},
    {"_asapR_decompose_network", (DL_FUNC) &_asapR_decompose_network, 4},
    {"_asapR_mmutil_copy_selected_rows", (DL_FUNC) &_asapR_mmutil_copy_selected_rows, 9},
    {"_asapR_mmutil_copy_selected_columns", (DL_FUNC) &_asapR_mmutil_copy_selected_columns, 7},
    {"_asapR_mmutil_build_index", (DL_FUNC) &_asapR_mmutil_build_index, 2},
    {"_asapR_mmutil_read_index", (DL_FUNC) &_asapR_mmutil_read_index, 1},
    {"_asapR_mmutil_check_index", (DL_FUNC) &_asapR_mmutil_check_index, 2},
    {"_asapR_mmutil_info", (DL_FUNC) &_asapR_mmutil_info, 1},
    {"_asapR_mmutil_rownames", (DL_FUNC) &_asapR_mmutil_rownames, 3},
    {"_asapR_mmutil_colnames", (DL_FUNC) &_asapR_mmutil_colnames, 3},
    {"_asapR_mmutil_write_mtx", (DL_FUNC) &_asapR_mmutil_write_mtx, 2},
    {"_asapR_mmutil_read_columns_sparse", (DL_FUNC) &_asapR_mmutil_read_columns_sparse, 4},
    {"_asapR_mmutil_read_columns", (DL_FUNC) &_asapR_mmutil_read_columns, 4},
    {"_asapR_mmutil_read_rows_columns", (DL_FUNC) &_asapR_mmutil_read_rows_columns, 5},
    {"_asapR_mmutil_simulate_poisson_mixture", (DL_FUNC) &_asapR_mmutil_simulate_poisson_mixture, 9},
    {"_asapR_mmutil_simulate_poisson", (DL_FUNC) &_asapR_mmutil_simulate_poisson, 7},
    {"_asapR_pbt_dependency_matrix", (DL_FUNC) &_asapR_pbt_dependency_matrix, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_asapR(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
